{{- range .Values.cronjobs }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ include "basic.fullname" $ }}-{{ .name }}
  labels:
    app.kubernetes.io/name: {{ include "basic.name" $ }}-{{ .name }}
    helm.sh/chart: {{ include "basic.chart" $ }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
spec:
  schedule: {{ .schedule | quote }}
  startingDeadlineSeconds: 100
  concurrencyPolicy: {{ .concurrencyPolicy | default "Forbid" }}
  failedJobsHistoryLimit: {{ .failedJobsHistoryLimit | default "1" }}
  successfulJobsHistoryLimit: {{ .successfulJobsHistoryLimit | default "3" }}
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
            {{- with $.Values.podAnnotations }}
            {{- toYaml . | trim | nindent 12 }}
            {{- end }}
        spec:
          containers:
            - name: {{ include "basic.name" $ }}-{{ .name }}
              image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
              imagePullPolicy: {{ $.Values.image.pullPolicy }}
              command:
              {{- toYaml .command | trim | nindent 16 }}
              {{- if or ($.Values.app.env) (.env) }}
              env:
                - name: PROMETHEUS_EXPORTER_REQUEST_STATS
                  value: "false"
                - name: PROMETHEUS_EXPORTER_PROCESS_STATS
                  value: "false"
                {{- range $name, $value := $.Values.app.env }}
                - name: {{ $name | quote }}
                  value: {{ $value | quote }}
                {{- end }}
                {{- range $name, $value := .env }}
                - name: {{ $name | quote }}
                  value: {{ $value | quote }}
                {{- end }}
              {{- end }}
              {{- if or ($.Values.app.envFromSecrets) ($.Values.app.envFromConfigMaps) }}
              envFrom:
                {{- range $.Values.app.envFromConfigMaps }}
                - configMapRef:
                    name: {{ . | quote }}
                {{- end }}
                {{- range $.Values.app.envFromSecrets }}
                - secretRef:
                    name: {{ . | quote }}
                {{- end }}
              {{- end }}
              volumeMounts:
                {{- if $.Values.app.settingsYmlSecret.enabled }}
                - mountPath: {{ $.Values.app.home }}/config/{{ $.Values.app.settingsYmlSecret.key }}
                  name: settings-yml-volume
                  subPath: {{ $.Values.app.settingsYmlSecret.key }}
                {{- end }}
              {{- with .resources }}
              resources:
                {{- toYaml . | trim | nindent 16 }}
              {{- end }}
          restartPolicy: OnFailure
          {{- with $.Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | trim | nindent 12}}
          {{- end }}
          volumes:
            {{- if $.Values.app.settingsYmlSecret.enabled }}
            - name: settings-yml-volume
              secret:
                secretName: {{ $.Values.app.settingsYmlSecret.name | quote }}
                items:
                  - key: {{ $.Values.app.settingsYmlSecret.key | quote }}
                    path: {{ $.Values.app.settingsYmlSecret.key | quote }}
            {{- end }}
          {{- with $.Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $.Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $.Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
...
{{- end -}}
